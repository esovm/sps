(define-static-vector main::input-file sps:input:file:size)
(define-static-vector main::lexer sps:lexer:size)
(define-static-vector main::hash-table sps:hash-table:size)
(define-static-vector main::symbol-table sps:symbol-table:size)
(define-static-vector main::ast sps:ast::state:size)
(define-static-vector main::sps->c sps->c:state:size)

(define (main::die message)
  (let ((op (sps:io:stdout)))
    (sps:io:print:string op message)
    (sps:io:newline op)
    (sps:abort)))

(define (main::open-pools)
  (let ((pools (sps:mem:pools:open)))
    (or pools (main::die "could not open pools"))))

(define (main::open-sp-pool pools)
  (let ((sp (sps:mem:sp:open pools)))
    (or sp (main::die " could not open a stack pool"))))

(define (main::open-output-file file-name)
  (let ((file (sps:io:open-output file-name)))
    (or file 
        (let ((op (sps:io:stdout)))
          (sps:io:print:string op "could not open output file ")
          (sps:io:print:string op file-name)
          (sps:io:newline op)
          (sps:abort)))))

(define (main::strlen string)
  (let loop ((i 0))
    (if (sps:string:ref string i)
        (loop (+ i 1))
        i)))

(define (main::compile-it input-file-name output-file-name output-preamble-file-name)
  (let* ((pools (main::open-pools))
         (sp (main::open-sp-pool pools))
         (main-port (main::open-output-file output-file-name))
         (preamble-port (main::open-output-file output-preamble-file-name)))
    (or (sps:input:file:open main::input-file input-file-name sp sps:mem:sp:ops)
        (main::die "could not open input"))
    (or (sps:hash-table:open main::hash-table pools)
        (main::die "could not open hash table"))
    (or (sps:ast::state-open main::ast pools main::hash-table)
        (main::die "could not open ast"))
    (or (sps:symbol-table:open main::symbol-table pools)
        (main::die "could not open symbol table"))
    (or (sps->c:state:open main::sps->c pools main::hash-table 
                           main::symbol-table main-port preamble-port)
        (main::die "could not open sps->c"))
    (or (sps:lexer:open main::lexer main::input-file sps:input:file:ops sps:ast::errors)
        (main::die "could not open lexer"))
    (or (sps:ast main::lexer main::ast)
        (main::die "could not lex"))
    (or (and (sps:io:print:string main-port "#include \"sps_prelude.h\"")
             (sps:io:newline main-port)
             (sps:io:print:string main-port "#include \"")
             (sps:io:write main-port output-preamble-file-name (main::strlen output-preamble-file-name))
             (sps:io:print:string main-port "\"")
             (sps:io:newline main-port))
        (main::die "could write header"))
    (sps->c main::sps->c (sps:ast::state:root main::ast))))
            

(define (main argc argv)
  (let ((program-name (sps:word-vector:ref argv 0)))
    (if (= argc 4)
        (not (main::compile-it (sps:word-vector:ref argv 1) (sps:word-vector:ref argv 2) (sps:word-vector:ref argv 3)))
        (let ((op (sps:io:stdout)))
          (sps:io:print:string op " : <scheme-file-name> <output-file-name> <output-pre-amble-file-name>")
          (sps:io:newline op)))))
